// Code generated by mockery v2.20.0. DO NOT EDIT.

package mocks

import (
	sql "github.com/rodericusifo/echo-template/internal/app/model/database/sql"
	types "github.com/rodericusifo/echo-template/pkg/types"
	mock "github.com/stretchr/testify/mock"
)

// IEmployeeDatabaseSQLRepository is an autogenerated mock type for the IEmployeeDatabaseSQLRepository type
type IEmployeeDatabaseSQLRepository struct {
	mock.Mock
}

// CountAllEmployee provides a mock function with given fields: query
func (_m *IEmployeeDatabaseSQLRepository) CountAllEmployee(query *types.Query) (int, error) {
	ret := _m.Called(query)

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func(*types.Query) (int, error)); ok {
		return rf(query)
	}
	if rf, ok := ret.Get(0).(func(*types.Query) int); ok {
		r0 = rf(query)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func(*types.Query) error); ok {
		r1 = rf(query)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateEmployee provides a mock function with given fields: payload
func (_m *IEmployeeDatabaseSQLRepository) CreateEmployee(payload *sql.Employee) error {
	ret := _m.Called(payload)

	var r0 error
	if rf, ok := ret.Get(0).(func(*sql.Employee) error); ok {
		r0 = rf(payload)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteEmployee provides a mock function with given fields: payload
func (_m *IEmployeeDatabaseSQLRepository) DeleteEmployee(payload *sql.Employee) error {
	ret := _m.Called(payload)

	var r0 error
	if rf, ok := ret.Get(0).(func(*sql.Employee) error); ok {
		r0 = rf(payload)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetEmployee provides a mock function with given fields: query
func (_m *IEmployeeDatabaseSQLRepository) GetEmployee(query *types.Query) (*sql.Employee, error) {
	ret := _m.Called(query)

	var r0 *sql.Employee
	var r1 error
	if rf, ok := ret.Get(0).(func(*types.Query) (*sql.Employee, error)); ok {
		return rf(query)
	}
	if rf, ok := ret.Get(0).(func(*types.Query) *sql.Employee); ok {
		r0 = rf(query)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sql.Employee)
		}
	}

	if rf, ok := ret.Get(1).(func(*types.Query) error); ok {
		r1 = rf(query)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetListEmployeeAndCount provides a mock function with given fields: query
func (_m *IEmployeeDatabaseSQLRepository) GetListEmployeeAndCount(query *types.Query) ([]*sql.Employee, int, error) {
	ret := _m.Called(query)

	var r0 []*sql.Employee
	var r1 int
	var r2 error
	if rf, ok := ret.Get(0).(func(*types.Query) ([]*sql.Employee, int, error)); ok {
		return rf(query)
	}
	if rf, ok := ret.Get(0).(func(*types.Query) []*sql.Employee); ok {
		r0 = rf(query)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*sql.Employee)
		}
	}

	if rf, ok := ret.Get(1).(func(*types.Query) int); ok {
		r1 = rf(query)
	} else {
		r1 = ret.Get(1).(int)
	}

	if rf, ok := ret.Get(2).(func(*types.Query) error); ok {
		r2 = rf(query)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// UpdateEmployee provides a mock function with given fields: payload
func (_m *IEmployeeDatabaseSQLRepository) UpdateEmployee(payload *sql.Employee) error {
	ret := _m.Called(payload)

	var r0 error
	if rf, ok := ret.Get(0).(func(*sql.Employee) error); ok {
		r0 = rf(payload)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewIEmployeeDatabaseSQLRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewIEmployeeDatabaseSQLRepository creates a new instance of IEmployeeDatabaseSQLRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewIEmployeeDatabaseSQLRepository(t mockConstructorTestingTNewIEmployeeDatabaseSQLRepository) *IEmployeeDatabaseSQLRepository {
	mock := &IEmployeeDatabaseSQLRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
